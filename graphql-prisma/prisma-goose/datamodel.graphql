type Show {
  id: ID!
  date: Date!
  venue: Venue!
  setlist: [Set!]! @relation(name: "SetToShow", onDelete: CASCADE)
  comments: [Comment!]! @relation("CommentToShow", onDelete: CASCADE)
}

type Set {
  id: ID!
  name: SetNumber
  tracks: [Track!]! @relation(name: "TrackToSet", onDelete: SET_NULL)
  show: Show! @relation(name: "SetToShow", onDelete: SET_NULL)
}

type Track {
  song: ID! @relation(name: "TrackToSong", onDelete: SET_NULL)
  show: ID! @relation(name: "TrackToSet", onDelete: SET_NULL)
  notes: String
}

type Song {
  id: ID!
  name: String!
  notes: String!
  sets: [Set!]! @relation("SongToSet", onDelete: SET_NULL)
  shows: [Show!]! @relation(name: "SongToShow", onDelete: SET_NULL)
}

type Venue {
  id: ID!
  name: String!
  city: String!
  state: String!
  shows: [Show!]! @relation(name: "VenueToShow", onDelete: SET_NULL)
}

type Comment {
  id: ID!
  author: User! @relation(name: "CommentToUser", onDelete: SET_NULL)
  text: String
  rating: Int
}

type User {
  id: ID!
  username: String! @unique
  comments: [Comment!]! @relation(name: "CommentToUser", onDelete: CASCADE)
  shows: [Show!]!
}

enum SetNumber {
  SET_1
  SET_2
  SET_3
  ENCORE_1
  ENCORE_2
}